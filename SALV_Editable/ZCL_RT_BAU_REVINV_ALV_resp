""""""""""""""""""""""" STATUS is defined in a FG and loaded via Object Name   
class ZCL_RT_BAU_REVINV_ALV definition
  public
  inheriting from CL_SALV_MODEL_LIST
  create public .

public section.

  types:
    BEGIN OF ty_fields,
        field TYPE string,  "Name of field
        key   TYPE boolean, "key for managing global alv
        idx   TYPE boolean, "indicates if the field is to be used as idx in some process;
        "idx is excluded from keys in some process
        tech  TYPE boolean, "technical field
        text  TYPE string,  "text to show in column
        sort  TYPE i,       "used in sort process and indicates order position
        edit  TYPE boolean, "field to be modify-enabled
        icon  TYPE boolean, "field used as icon
      END OF ty_fields .
  types:
    tt_fields TYPE SORTED TABLE OF ty_fields WITH UNIQUE KEY field .
  types:
    BEGIN OF ty_cnst,
        fname TYPE fname_021,
        numb  TYPE  tvarv_numb,
        sign  TYPE  tvarv_sign,
        opti  TYPE  tvarv_opti,
        low   TYPE tvarv_val,
        high  TYPE  tvarv_val,
      END OF ty_cnst .
  types:
    tt_cnst TYPE SORTED TABLE OF ty_cnst WITH NON-UNIQUE KEY fname numb .

  data GT_CNST type TT_CNST .
  class-data C_BO_BAU type STRING value 'BO_BAU' ##NO_TEXT.
  class-data C_IP_SERV_OUT type STRING value 'IP_SERV_OUT' ##NO_TEXT.
  class-data C_IP_SERV_IN type STRING value 'IP_SERV_IN' ##NO_TEXT.

  events TO_UPDATE
    exporting
      value(E_TO_UPDATE) type ref to DATA
      value(E_INFO) type STRING .
  events TO_SAVE
    exporting
      value(MOD_TAB) type ref to DATA .
  events TO_VAL
    exporting
      value(E_TO_VAL) type ref to DATA .
  events TO_END
    exporting
      value(E_TO_END) type ref to DATA .
  class-events TO_MESSAGE
    exporting
      value(E_ANS) type CHAR1 .

  methods DISPLAY_ALV
    importing
      !I_NO_REFRESH type BOOLEAN optional .
  methods CONSTRUCTOR
    importing
      !I_TAB_TO_ALV type ref to DATA
      !I_KEY_FIELDS type TT_FIELDS
      !I_STATUS type STRING .
  methods SET_DATA_SAVED
    importing
      !I_SAVE_OK type BOOLEAN .
  class-methods SEND_MESSAGE
    importing
      !I_TYPE_MESSAGE type CHAR1
      !I_CONF type BOOLEAN optional
      !I_MESSAGE type STRING
    returning
      value(R_OK) type CHAR1 .
  methods SET_VAL_OK
    importing
      !I_VAL_OK type BOOLEAN .
  PROTECTED SECTION.
private section.

  types:
    BEGIN OF ty_sel,
        sel_key   TYPE string,
        sel_key_p TYPE string,
      END OF ty_sel .

  data SELECTION_KEY type TY_SEL .
  data STATUS type STRING .
  data GT_OUTAB type ref to DATA .
  data GT_TO_DB type ref to DATA .
  data GR_TABLE type ref to CL_SALV_TABLE .
  class-data PARSER type CHAR1 value ',' ##NO_TEXT.
  data SAVE_OK type BOOLEAN .
  data GT_KEYS type TT_FIELDS .
  data MOD_IDX type I .
  data VAL_OK type BOOLEAN .

  methods SAVE_DATA
    changing
      !O_TAB type ref to DATA optional
    returning
      value(I_OK) type BOOLEAN .
  methods ATTA_BORRAR
    returning
      value(R_OK) type BOOLEAN .
  methods ADD_TO_MOD_DB
    importing
      !I_LINE type ref to DATA .
  methods GET_REGS_FROM_DIST
    returning
      value(R_TAB) type ref to DATA .
  methods SAVE_SEQUENCE
    returning
      value(R_OK) type BOOLEAN .
  methods GET_TABKEY_FROM_SEL
    importing
      !I_TO_PARSE type BOOLEAN optional
    returning
      value(R_TABKEY) type STRING .
  methods CHECK_CHANGES .
  methods LOAD_CNST
    returning
      value(I_OK) type BOOLEAN .
  methods ATTA_CARGA
    returning
      value(R_OK) type BOOLEAN .
  methods ATTA_MOSTRAR .
  methods SET_SORT
    importing
      !I_NO_REFRESH type BOOLEAN optional .
  methods UPDATE_LINE
    importing
      !I_TAB type ref to DATA .
  methods SET_EDITABLE
    importing
      !I_FIELDS type TT_FIELDS .
  methods SET_COLUMNS
    changing
      !IO_TABLE type ref to CL_SALV_TABLE .
  methods SET_FUNCTIONS
    changing
      !IO_TABLE type ref to CL_SALV_TABLE .
  methods CREATE_ALV
    changing
      !I_TAB type ANY TABLE .
  methods USER_COMMANDO
    for event ADDED_FUNCTION of CL_SALV_EVENTS
    importing
      !E_SALV_FUNCTION .
  methods SET_EVENTS
    changing
      !IO_TABLE type ref to CL_SALV_TABLE .
  methods HANDLE_DATA_CHANGED
    for event DATA_CHANGED of CL_GUI_ALV_GRID
    importing
      !ER_DATA_CHANGED .
  methods END_PROCESS
    returning
      value(R_OK) type BOOLEAN .
ENDCLASS.



CLASS ZCL_RT_BAU_REVINV_ALV IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ADD_TO_MOD_DB
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_LINE                         TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_to_mod_db.
    FIELD-SYMBOLS: <fs_inline> TYPE any,
                   <fs_outab>  TYPE ANY TABLE, "global tab with master data
                   <fs_modtab> TYPE STANDARD TABLE. "data to be updated in db
    DATA: otab  TYPE abap_sortorder_tab.

    ASSIGN gt_outab->* TO <fs_outab>.
    ASSIGN i_line->* TO <fs_inline>.

    IF gt_to_db IS NOT BOUND.
      CREATE DATA gt_to_db LIKE <fs_outab>.
    ENDIF.
*Objeto data con registros a modificar en DB
    ASSIGN gt_to_db->* TO <fs_modtab>.
*Idx identifica los registros mas recientes
    DATA(idx) = VALUE #( gt_keys[ idx = abap_true ]-field OPTIONAL ).
    IF idx IS NOT INITIAL.
      ASSIGN COMPONENT idx OF STRUCTURE <fs_inline> TO FIELD-SYMBOL(<fs_idx>).
*Mod_idx lleva el conteo del ultimo indice
      <fs_idx> = mod_idx = mod_idx + 1.
    ENDIF.
    INSERT <fs_inline> INTO TABLE <fs_modtab> .
*Arma tabla con llaves maestras para sort en siguiente instrucci√≥n
    otab = VALUE #( FOR wa IN gt_keys
                    WHERE ( key IS NOT INITIAL )
                    descending = abap_true
                    ( name = wa-field ) ).
*Coloca los registros duplicados en el orden descendente
    SORT <fs_modtab> BY (otab).
*Llena placeholders para delete; variables vacias son ignoradas.
    DATA(lt_del) = VALUE tt_fields( FOR wa IN gt_keys
                                    WHERE ( key = abap_true AND idx IS INITIAL )
                                    ( wa ) ).
    DATA(del1) = VALUE #( lt_del[ 1 ]-field OPTIONAL ).
    DATA(del2) = VALUE #( lt_del[ 2 ]-field OPTIONAL ).
    DATA(del3) = VALUE #( lt_del[ 3 ]-field OPTIONAL ).
    DATA(del4) = VALUE #( lt_del[ 4 ]-field OPTIONAL ).
    DATA(del5) = VALUE #( lt_del[ 5 ]-field OPTIONAL ).
    DELETE ADJACENT DUPLICATES FROM <fs_modtab> COMPARING (del1) (del2) (del3) (del4) (del5).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ATTA_BORRAR
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD atta_borrar.
*    DATA: go_myobject TYPE REF TO cl_gos_manager,
*          w_logsys    TYPE tbdls-logsys,
*          w_container TYPE REF TO cl_gui_custom_container.
    DATA obj_id TYPE c LENGTH 50.
*Obtiene llave de URI
    obj_id = me->get_tabkey_from_sel( ).
    CHECK obj_id IS NOT INITIAL.

*Localiza los archivos existentes con esa URI+OBJ_ID
    cl_alink_connection=>find(
      EXPORTING
        sap_object         = VALUE swo_objtyp( gt_cnst[ fname = c_bo_bau ]-low OPTIONAL )
        object_id          = obj_id
        until_ar_date      = sy-datum
      IMPORTING
        connections        = DATA(lt_conn)
      EXCEPTIONS
        not_found          = 1
        error_authorithy   = 2
        error_parameter    = 3
        OTHERS             = 4
    ).
    IF lines( lt_conn ) IS NOT INITIAL.
      DATA(reg) = VALUE #( lt_conn[ 1 ] OPTIONAL ).
*Elimina el archivo existente
      cl_alink_connection=>delete_by_key(
        EXPORTING
          sap_object = reg-sap_object
          object_id  = reg-object_id
          archiv_id  = reg-archiv_id
          arc_doc_id = reg-arc_doc_id
        EXCEPTIONS
          not_found  = 1
          OTHERS     = 2
      ).
      r_ok = COND #( WHEN sy-subrc EQ 0 THEN abap_true ).
    ELSE.
      r_ok = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ATTA_CARGA
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD atta_carga.

    DATA: go_myobject TYPE REF TO cl_gos_manager,
          w_logsys    TYPE tbdls-logsys,
          w_container TYPE REF TO cl_gui_custom_container.

    DATA(objtype) = VALUE saeobjid( gt_cnst[ fname = c_bo_bau ]-low OPTIONAL ).
    DATA(ip_service) = VALUE sgs_srvnam( gt_cnst[ fname = c_ip_serv_in ]-low OPTIONAL ).

    CHECK objtype IS NOT INITIAL AND ip_service IS NOT INITIAL.

    CREATE OBJECT go_myobject.

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system             = w_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    DATA(obj) = VALUE borident( objtype = objtype
                                objkey = me->get_tabkey_from_sel( )
                                logsys = w_logsys   ). "Info Object // objtype = nombre del Bisness Object

    CALL METHOD go_myobject->start_service_direct
      EXPORTING
        ip_service       = ip_service
        is_object        = obj
        io_container     = w_container
      EXCEPTIONS
        no_object        = 1
        object_invalid   = 2
        execution_failed = 3
        OTHERS           = 4.
    CASE sy-subrc.
      WHEN 0.
        COMMIT WORK.
    ENDCASE.
**********************************************************************
*Verifica que el archivo se cargo
    DATA obj_id TYPE c LENGTH 50.
    obj_id = obj-objkey.

    cl_alink_connection=>find(
      EXPORTING
        sap_object         = obj-objtype
        object_id          = obj_id
        until_ar_date      = sy-datum
      IMPORTING
        connections        = DATA(lt_conn)
      EXCEPTIONS
        not_found          = 1
        error_authorithy   = 2
        error_parameter    = 3
        OTHERS             = 4
    ).

    r_ok = COND #( WHEN lines( lt_conn ) IS NOT INITIAL THEN abap_true ).
*BORRARTEST
*    r_ok = abap_true.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ATTA_MOSTRAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD atta_mostrar.
    DATA: go_myobject TYPE REF TO cl_gos_manager,
          w_logsys    TYPE tbdls-logsys,
          w_container TYPE REF TO cl_gui_custom_container.

    DATA(objtype) = VALUE saeobjid( gt_cnst[ fname = c_bo_bau ]-low OPTIONAL ).
    DATA(ip_service) = VALUE sgs_srvnam( gt_cnst[ fname = c_ip_serv_out ]-low OPTIONAL ).

    CHECK objtype IS NOT INITIAL AND ip_service IS NOT INITIAL.

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system             = w_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    DATA(obj) = VALUE borident( objtype = objtype
                                objkey = me->get_tabkey_from_sel( )
                                logsys = w_logsys   ). "Info Object // objtype = nombre del Bisness Object

    CREATE OBJECT go_myobject
      EXPORTING
        is_object = obj
        ip_mode   = 'L' "display
*       ip_no_commit = 'X' ""attachments should only be saved by own commits
      EXCEPTIONS
        OTHERS    = 1.
* Llama servicio
    CALL METHOD go_myobject->start_service_direct
      EXPORTING
        ip_service       = ip_service
        is_object        = obj
        io_container     = w_container
      EXCEPTIONS
        no_object        = 1
        object_invalid   = 2
        execution_failed = 3
        OTHERS           = 4.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->CHECK_CHANGES
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_changes.
**********************************************************************
*------------- PARA ALV EDITABLE UNICAMENTE
**********************************************************************
*type required for correct casting
    DATA: lo_model     TYPE REF TO cl_salv_model,
          o_adapter    TYPE REF TO cl_salv_adapter,
          lo_grid      TYPE REF TO cl_gui_alv_grid,
          lo_full_adap TYPE REF TO cl_salv_fullscreen_adapter.

    CHECK gr_table IS BOUND.

    TRY.
*Narrow casting
        lo_model ?= me->gr_table.
*Object for the local inherited class from the CL_SALV_MODEL_LIST
        o_adapter ?= lo_model->r_controller->r_adapter.
*Adapter
        lo_full_adap ?= o_adapter.
*Get the Grid
        lo_grid = lo_full_adap->get_grid( ).
    ENDTRY.
* Registra cambios
    lo_grid->check_changed_data( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_ALV->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB_TO_ALV                   TYPE REF TO DATA
* | [--->] I_KEY_FIELDS                   TYPE        TT_FIELDS
* | [--->] I_STATUS                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    FIELD-SYMBOLS: <out_tab> TYPE ANY TABLE,
                   <in_tab>  TYPE ANY TABLE.
    DATA out_tab TYPE REF TO data.

**********************************************************************
*    Super class needed for editable ALV
    super->constructor( ).
**********************************************************************

    IF i_tab_to_alv IS BOUND.
      status = i_status.
      gt_keys = i_key_fields.

      ASSIGN i_tab_to_alv->* TO <in_tab>.
      CREATE DATA out_tab LIKE <in_tab>.
      ASSIGN out_tab->* TO <out_tab>.
      <out_tab> = <in_tab>.
      GET REFERENCE OF <out_tab> INTO gt_outab.

      me->create_alv( CHANGING i_tab = <out_tab> ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->CREATE_ALV
* +-------------------------------------------------------------------------------------------------+
* | [<-->] I_TAB                          TYPE        ANY TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_alv.
    CHECK me->load_cnst( ) EQ abap_true.
*... ¬ß2 create an ALV table
    TRY.
        cl_salv_table=>factory(
        IMPORTING
          r_salv_table   = gr_table
        CHANGING
          t_table        = i_tab ).
      CATCH cx_salv_msg.                                "#EC NO_HANDLER
    ENDTRY.

*... ¬ß3.1 activate ALV generic Functions

    me->set_functions( CHANGING io_table = gr_table ).

*... set the columns technical

    me->set_columns( CHANGING io_table = gr_table ).

*... ¬ß6 register to the events of cl_salv_table

    me->set_events( CHANGING io_table = gr_table ).

*... ¬ß7.1 set selection mode
    DATA(lr_selections) = gr_table->get_selections( ).
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>single ).

*... set list title

    DATA: lr_display_settings TYPE REF TO cl_salv_display_settings,
          l_title             TYPE lvc_title.

*    l_title = 'text-t01'.
    lr_display_settings = gr_table->get_display_settings( ).
    lr_display_settings->set_list_header( |Revaloraci√≥n de Inventario| ).

*... ¬ß7 display the table in pop up
    gr_table->set_screen_popup(
      start_column = 1
      end_column   = 130
      start_line   = 1
      end_line     = 20 ).


*... ¬ß8 Set sort options
    me->set_sort( i_no_refresh = abap_true  ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_ALV->DISPLAY_ALV
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_NO_REFRESH                   TYPE        BOOLEAN(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD display_alv.
    IF gr_table IS BOUND AND i_no_refresh IS INITIAL.
      gr_table->refresh( ).
    ELSE.
      gr_table->display( ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->END_PROCESS
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD end_process.
*Dispara evento enviando tabla final
    RAISE EVENT to_end EXPORTING e_to_end = gt_outab.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->GET_REGS_FROM_DIST
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_TAB                          TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_regs_from_dist.
    FIELD-SYMBOLS: <fs_intab> TYPE ANY TABLE,
                   <fs_outab> TYPE STANDARD TABLE.
    DATA lr TYPE REF TO data.
*Recupera los registros a modificar de acuerdo al sort que se envio
****deber√≠a estar en ZCL...DATA
    CREATE DATA r_tab TYPE TABLE OF REF TO data.
    ASSIGN r_tab->* TO <fs_outab>.

    ASSIGN gt_outab->* TO <fs_intab>.
**********************************************************************
*Arma din√°micamente la condici√≥n para el loop
    DATA(rem_data) = get_tabkey_from_sel( abap_true ).
    DATA(cond) = ||.
    LOOP AT gt_keys REFERENCE INTO DATA(key) WHERE sort IS NOT INITIAL.
      SPLIT rem_data AT parser INTO: DATA(key_data) rem_data.
      cond = COND #( WHEN key_data IS INITIAL THEN cond ELSE
                     |{ cond }{ key->*-field } = { key_data } {
                                     COND #( WHEN rem_data IS NOT INITIAL THEN |AND | ELSE || ) }| ) .
    ENDLOOP.
**********************************************************************
    LOOP AT <fs_intab> ASSIGNING FIELD-SYMBOL(<fs_line>) WHERE (cond).
      GET REFERENCE OF <fs_line> INTO lr.
      APPEND lr TO <fs_outab>.
*Tabla de salida con registros seleccionados en objeto data
    ENDLOOP.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->GET_TABKEY_FROM_SEL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TO_PARSE                     TYPE        BOOLEAN(optional)
* | [<-()] R_TABKEY                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_tabkey_from_sel.
    IF i_to_parse EQ abap_true AND selection_key-sel_key_p IS NOT INITIAL.
*Llave para parser almacenada
      r_tabkey = selection_key-sel_key_p.
    ELSEIF i_to_parse EQ abap_false AND selection_key-sel_key IS NOT INITIAL.
*Llave sin parser almacenada
      r_tabkey = selection_key-sel_key.
    ELSE.
*Crea nueva llave para almacenar y responder
      DATA(lt_rows) = gr_table->get_selections( )->get_selected_rows( ).
      CHECK lines( lt_rows ) IS NOT INITIAL.

*Recives only one line
      FIELD-SYMBOLS: <fst> TYPE STANDARD TABLE.

      ASSIGN gt_outab->* TO <fst>.

      READ TABLE <fst> ASSIGNING FIELD-SYMBOL(<fsl>) INDEX lt_rows[ 1 ].

      LOOP AT gt_keys REFERENCE INTO DATA(key) WHERE sort IS NOT INITIAL .
        ASSIGN COMPONENT key->*-field OF STRUCTURE <fsl> TO FIELD-SYMBOL(<key>).
        IF i_to_parse IS INITIAL.
          r_tabkey = selection_key-sel_key = |{ r_tabkey }{ <key> }|.
        ELSE.
          r_tabkey = selection_key-sel_key_p = |{ r_tabkey }{ <key> }{ parser }|.
        ENDIF.
      ENDLOOP.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->HANDLE_DATA_CHANGED
* +-------------------------------------------------------------------------------------------------+
* | [--->] ER_DATA_CHANGED                LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_data_changed.
    DATA line_to_mod TYPE REF TO data.
    FIELD-SYMBOLS <mp_mod_rows> TYPE ANY TABLE.

*Recupera registros modificados en ALV registrados como data changed
    ASSIGN er_data_changed->mp_mod_rows->* TO <mp_mod_rows>.
    LOOP AT <mp_mod_rows> ASSIGNING FIELD-SYMBOL(<fs_line>).
      GET REFERENCE OF <fs_line> INTO line_to_mod.
*Agregar la linea a tabla global a grabar
      me->add_to_mod_db( i_line = line_to_mod ).
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->LOAD_CNST
* +-------------------------------------------------------------------------------------------------+
* | [<-()] I_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_cnst.
    SELECT * FROM zim_cnst
      INTO CORRESPONDING FIELDS OF TABLE gt_cnst
      WHERE zzmod = 'RT'
      AND zzproyt = 'BAU'
      AND repid = sy-repid.

*    gt_cnst = VALUE #( ( fname = c_bo_bau numb = 1 low = 'ZBUS_BONIF' )
*                       ( fname = c_ip_serv_in numb = 1 low = 'ARL_LINK' )
*                       ( fname = c_ip_serv_out numb = 1 low = 'ARL_LINK' ) ).

    IF lines( gt_cnst ) IS NOT INITIAL.
      i_ok = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SAVE_DATA
* +-------------------------------------------------------------------------------------------------+
* | [<-->] O_TAB                          TYPE REF TO DATA(optional)
* | [<-()] I_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_data.
*Existen datos para grabar?
    CHECK gt_to_db IS BOUND.
*Dispara evento para manejador; respuesta se espera en save_ok
    RAISE EVENT to_save EXPORTING mod_tab = gt_to_db.
*Changed by event handler.
    i_ok = save_ok.
    CLEAR: gt_to_db, mod_idx.
    save_ok = abap_false.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SAVE_SEQUENCE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_sequence.
    r_ok = abap_false.
*Changes have been made and not saved
    IF gt_to_db IS BOUND.
*Trigger event to validate if changes in MC have a newly attached file
      RAISE EVENT to_val EXPORTING e_to_val = gt_to_db.
      IF val_ok NE abap_true.
        send_message( i_type_message = 'E'    " p = popup
                      i_message      = |{ text-m04 }| ).
      ELSE.
*Resets val_ok
        val_ok = abap_false.
*Save changes?
        CASE send_message( i_type_message = 'P'
                     i_conf    = abap_true
                     i_message = |{ text-m01 }| ).
          WHEN '1'. "respuesta popup
            IF me->save_data( ) EQ abap_true.
              send_message( i_type_message = 'S'
                            i_message = |{ text-m02 }| ).
              r_ok = abap_true. "and exit
            ELSE.
*could save to DB
              send_message( i_type_message = 'E'
                            i_message = |{ text-m03 }| ).
            ENDIF.
          WHEN OTHERS.
*Have chosen no save or cancel
            r_ok = abap_true.
        ENDCASE.
      ENDIF.
    ELSE.
*No changes have been made
      r_ok = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Static Public Method ZCL_RT_BAU_REVINV_ALV=>SEND_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TYPE_MESSAGE                 TYPE        CHAR1
* | [--->] I_CONF                         TYPE        BOOLEAN(optional)
* | [--->] I_MESSAGE                      TYPE        STRING
* | [<-()] R_OK                           TYPE        CHAR1
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD send_message.
    CASE i_type_message.
      WHEN 'P'.
        DATA(ans) = ''.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
*           titlebar      = SPACE
*           diagnose_object       = SPACE
            text_question = i_message
*           display_cancel_button = abap_false
          IMPORTING
            answer        = ans.
        RAISE EVENT to_message EXPORTING e_ans = ans.
        r_ok = ans.
      WHEN OTHERS.
        MESSAGE i_message TYPE 'S' DISPLAY LIKE i_type_message.
    ENDCASE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_COLUMNS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] IO_TABLE                       TYPE REF TO CL_SALV_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_columns.
    DATA: lr_columns TYPE REF TO cl_salv_columns_table,
          lr_column  TYPE REF TO cl_salv_column_table.

    lr_columns = io_table->get_columns( ).
    lr_columns->set_optimize( abap_true ).

* Set TEXT for column
    LOOP AT gt_keys REFERENCE INTO DATA(key) WHERE text IS NOT INITIAL.
      TRY.
          lr_column ?= lr_columns->get_column( |{ key->*-field }| ).
          lr_column->set_short_text( value = |{ key->*-text }| ).
          lr_column->set_medium_text( value = |{ key->*-text }| ).
          lr_column->set_long_text( value = |{ key->*-text }| ).
        CATCH cx_salv_not_found.                        "#EC NO_HANDLER
      ENDTRY.
    ENDLOOP.

* Set ICON column
    LOOP AT gt_keys REFERENCE INTO key WHERE icon IS NOT INITIAL.
      TRY.
          lr_column ?= lr_columns->get_column( |{ key->*-field }| ).
          lr_column->set_icon( if_salv_c_bool_sap=>true ).
          lr_column->set_long_text( |{ key->*-text }| ).
        CATCH cx_salv_not_found.                        "#EC NO_HANDLER
      ENDTRY.
    ENDLOOP.

* Set TECH column
    LOOP AT gt_keys REFERENCE INTO key WHERE tech IS NOT INITIAL.
      TRY .
          lr_column ?= lr_columns->get_column( |{ key->*-field }| ).
          lr_column->set_technical(
              value = if_salv_c_bool_sap=>true
          ).
      ENDTRY.
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_ALV->SET_DATA_SAVED
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_SAVE_OK                      TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_data_saved.
*Para modificar por el manejador del evento
    save_ok = i_save_ok.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_EDITABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FIELDS                       TYPE        TT_FIELDS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_editable.
**********************************************************************
*------------- PARA ALV EDITABLE UNICAMENTE
**********************************************************************
*Must be activated via function
*Type required for correct casting
    DATA: lo_model     TYPE REF TO cl_salv_model,
          o_adapter    TYPE REF TO cl_salv_adapter,
          lo_grid      TYPE REF TO cl_gui_alv_grid,
          lo_full_adap TYPE REF TO cl_salv_fullscreen_adapter.

    CHECK gr_table IS BOUND.

    TRY.
*Narrow casting
        lo_model ?= me->gr_table.
*Object for the local inherited class from the CL_SALV_MODEL_LIST
        o_adapter ?= lo_model->r_controller->r_adapter.
*Adapter
        lo_full_adap ?= o_adapter.
*Get the Grid
        lo_grid = lo_full_adap->get_grid( ).
    ENDTRY.

*Get catalog via grid
    DATA lt_fcat TYPE lvc_t_fcat.

    IF lo_grid IS BOUND.
      lo_grid->get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = lt_fcat ).
    ENDIF.
* Get catalog via controller
*    DATA(rt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog(
*          r_columns = gr_table->get_columns( ) " ALV Filter
*          r_aggregations = gr_table->get_aggregations( ) " ALV Aggregations
*          ).

*Editable ALV - all
*    DATA: ls_layout TYPE lvc_s_layo.
*    ls_layout-edit = 'X'.
*    CALL METHOD lo_grid->set_frontend_layout EXPORTING is_layout = ls_layout.

*Modify cataloged based on key tab - edit = abap_true
    LOOP AT i_fields REFERENCE INTO DATA(field) WHERE edit = abap_true.
      TRY .
          lt_fcat[ fieldname = field->*-field ]-edit = abap_true.
      ENDTRY.
    ENDLOOP.

    lo_grid->set_frontend_fieldcatalog( it_fieldcatalog = lt_fcat ).
*Handler for checked changes
    SET HANDLER me->handle_data_changed FOR lo_grid.
*Refresh the table
    CALL METHOD lo_grid->refresh_table_display.
**********************************************************************

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_EVENTS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] IO_TABLE                       TYPE REF TO CL_SALV_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_events.
    DATA: lr_events TYPE REF TO cl_salv_events_table.
    lr_events = gr_table->get_event( ).
**********************************************************************
* ONLY SALV EVENT
**********************************************************************

**... ¬ß6.1 register to the event USER_COMMAND
    SET HANDLER me->user_commando FOR lr_events.
**... ¬ß6.2 register to the event BEFORE_SALV_FUNCTION
*    SET HANDLER gr_events->on_before_salv_function FOR lr_events.
**... ¬ß6.3 register to the event AFTER_SALV_FUNCTION
*    SET HANDLER gr_events->on_after_salv_function FOR lr_events.
**... ¬ß6.4 register to the event DOUBLE_CLICK
*    SET HANDLER gr_events->on_double_click FOR lr_events.
**... ¬ß6.5 register to the event LINK_CLICK
*    SET HANDLER gr_events->on_link_click FOR lr_events.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_FUNCTIONS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] IO_TABLE                       TYPE REF TO CL_SALV_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_functions.
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE string,
          l_icon       TYPE string.
*Functions via status because there is no grid declared
    TRY .
        CALL METHOD io_table->set_screen_status
          EXPORTING
            report   = 'SAPLZFG_RT_BAU_UTIL'
            pfstatus = |{ status }|.
      CATCH cx_root.
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_SORT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_NO_REFRESH                   TYPE        BOOLEAN(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_sort.
**********************************************************************
*------------- PARA SORT
**********************************************************************
    CHECK gr_table IS BOUND.

    DATA(sort) = me->gr_table->get_sorts( ).
    sort->clear( ).
*Recupera de las llaves los campos que deben indicar el ordenamiento; sort = abap_true
    LOOP AT gt_keys REFERENCE INTO DATA(keys) WHERE sort IS NOT INITIAL.
      TRY.
          sort->add_sort( columnname = |{ keys->*-field }|
                          position = keys->*-sort ).
        CATCH cx_salv_not_found.    "
        CATCH cx_salv_existing.    "
        CATCH cx_salv_data_error.    "
      ENDTRY.
    ENDLOOP.

*En caso de requerir cambiar el sort durante el flujo
    IF i_no_refresh EQ abap_false.
      me->display_alv( ).
    ENDIF.
**********************************************************************
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_ALV->SET_VAL_OK
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_VAL_OK                       TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_val_ok.
*Para modificar por el manejador del evento
    val_ok = i_val_ok.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->UPDATE_LINE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB                          TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_line.
    FIELD-SYMBOLS: <fs_intab>  TYPE ANY TABLE. "incoming tab
    DATA: out_line TYPE REF TO data,
          eve_line TYPE REF TO data.

    CHECK i_tab IS BOUND.

    ASSIGN i_tab->* TO <fs_intab>.
    LOOP AT <fs_intab> ASSIGNING FIELD-SYMBOL(<fs_line>).
      ASSIGN <fs_line>->* TO FIELD-SYMBOL(<fs_st>).
*Modify global master data
      GET REFERENCE OF <fs_st> INTO eve_line.
*Trigger event to update line
      RAISE EVENT to_update EXPORTING e_to_update = eve_line e_info = get_tabkey_from_sel( ).
*Append modified reg to update db
      GET REFERENCE OF <fs_st> INTO out_line.
      me->add_to_mod_db( i_line = out_line ).
    ENDLOOP.

    me->display_alv( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->USER_COMMANDO
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_SALV_FUNCTION                LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD user_commando.
    CLEAR: selection_key.
*Ingresar cambios disparando evento data_changed
    me->check_changes( ).
    CASE  e_salv_function.
      WHEN 'LOAD'.
*Borrar archivo existente sin dar opciones
        IF me->atta_borrar( ) EQ abap_true AND
*Carga nuevo archivo
           me->atta_carga( ) EQ abap_true.
*Modifica lineas afectadas
          update_line(
            EXPORTING
              i_tab   = me->get_regs_from_dist( ) "obtiene lineas a modificar
          ).
        ENDIF.
      WHEN 'SHOW'.
*Muestra archivo vinculado
        me->atta_mostrar( ).
      WHEN 'EDIT'.
*Habilita opci√≥n de edici√≥n para ALV
        me->set_editable(
        i_fields = VALUE tt_fields( FOR wa IN gt_keys WHERE ( edit = abap_true ) ( wa ) ) "Campos indicados en key table
        ).
      WHEN 'SAVE'.
*Inicia secuencia de grabado
        me->save_sequence( ).
      WHEN 'CANCEL' OR 'EXIT' OR 'NEXT'.
*Inicia secuencia de grabado
        IF me->save_sequence( ) EQ abap_true.
*Dispara evento con resutlados finales de ALV para continuar con el flujo
          me->end_process( ).
*Leave popup
*       - (currently) not supported via code &AC1
          me->gr_table->close_screen( ).
        ENDIF.
    ENDCASE.
  ENDMETHOD.
ENDCLASS.