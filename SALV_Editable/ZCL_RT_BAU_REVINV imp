  METHOD constructor.
    TYPES: BEGIN OF ty_test,
             matnr TYPE mara-matnr,
             lifnr TYPE lifnr,
             icon  TYPE icon_d,
           END OF ty_test,
           tt_outab TYPE STANDARD TABLE OF ty_test WITH NON-UNIQUE DEFAULT KEY.

    DATA(out_tab) = VALUE tt_outab(
                                    ( matnr = '000000000000000001' lifnr = 'a' icon = icon_absence )
                                    ( matnr = '000000000000000003' lifnr = 'a' )
                                    ( matnr = '000000000000000003' )
                                    ( matnr = '000000000000000002' )
                                     ).
    super->constructor( ).
    GET REFERENCE OF out_tab INTO gt_outab.
    me->create_alv( CHANGING i_tab = out_tab ).
    me->display_alv( ).
  ENDMETHOD.

  METHOD display_alv.
*    DATA lo TYPE REF TO zif_rt_bau_rep_acc.
*    DATA la TYPE REF TO zcl_rt_bau_revinv.
*    CREATE OBJECT la.
*    lo ?= la.
*    DATA(ls) = lo->val_acc( ).
    IF gr_table IS BOUND.
      gr_table->display( ).
    ENDIF.

  ENDMETHOD.

  METHOD carga_archivo.
    DATA(lt_sel_cel) = gr_table->get_selections( )->get_selected_cells( ).


**********************************************************************
*------------- PARA FUNCIÓN CARGA ARCHIVO
**********************************************************************
    DATA: go_myobject TYPE REF TO cl_gos_manager,
          obj         TYPE borident.              "Info Object
    DATA w_logsys     TYPE tbdls-logsys.

    DATA: w_container TYPE REF TO cl_gui_custom_container,
          ip_service  TYPE sgs_srvnam.
    CONSTANTS : c_obj_bus_boni  TYPE saeobjid    VALUE 'ZBUS_BONIF'.


    SELECT znumcon, lifnr, zdescon,
           abtnr, datab, datbi,
           ersda, cputm, ernam
      INTO TABLE @DATA(it_acdos)
      FROM zrt_aboni.

    obj-objtype = c_obj_bus_boni. "nombre del Bisiness Object
    DATA(ls_acdos) = VALUE #( it_acdos[ 1 ] OPTIONAL ).
    obj-objkey = |{ ls_acdos-znumcon }{ ls_acdos-lifnr }{ ls_acdos-abtnr }|.

    CREATE OBJECT go_myobject.

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system             = w_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    ip_service = 'ARL_LINK'.
    obj-logsys = w_logsys.

    CALL METHOD go_myobject->start_service_direct
      EXPORTING
        ip_service       = ip_service
        is_object        = obj
        io_container     = w_container
      EXCEPTIONS
        no_object        = 1
        object_invalid   = 2
        execution_failed = 3
        OTHERS           = 4.
    CASE sy-subrc.
      WHEN 0.
        COMMIT WORK.
        IF sy-subrc IS INITIAL.
          i_ok = abap_true.
        ENDIF.
    ENDCASE.
**********************************************************************
  ENDMETHOD.

  METHOD check_changes.
**********************************************************************
*------------- PARA ALV EDITABLE UNICAMENTE
**********************************************************************
*type required for correct casting
    DATA: lo_model     TYPE REF TO cl_salv_model,
          o_adapter    TYPE REF TO cl_salv_adapter,
          lo_grid      TYPE REF TO cl_gui_alv_grid,
          lo_full_adap TYPE REF TO cl_salv_fullscreen_adapter.

    CHECK gr_table IS BOUND.

    TRY.
*   Narrow casting
        lo_model ?= me->gr_table.
*   Object for the local inherited class from the CL_SALV_MODEL_LIST
        o_adapter ?= lo_model->r_controller->r_adapter.
*   Adapter
        lo_full_adap ?= o_adapter.
*   Get the Grid
        lo_grid = lo_full_adap->get_grid( ).
    ENDTRY.
    lo_grid->check_changed_data( ).
  ENDMETHOD.    

  METHOD create_alv.
*... §2 create an ALV table
    TRY.
        cl_salv_table=>factory(
*        EXPORTING
*          r_container    = gr_cust_cont_100
*          container_name = 'CC_ALV'
        IMPORTING
          r_salv_table   = gr_table
        CHANGING
          t_table        = i_tab ).
      CATCH cx_salv_msg.                                "#EC NO_HANDLER
    ENDTRY.

*... §3.1 activate ALV generic Functions

    me->set_functions( CHANGING io_table = gr_table ).

*... set the columns technical

    me->set_columns( CHANGING io_table = gr_table ).

*... §6 register to the events of cl_salv_table

    me->set_events( CHANGING io_table = gr_table ).

*... §7.1 set selection mode
    DATA(lr_selections) = gr_table->get_selections( ).
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>single ).

*... set list title

    DATA: lr_display_settings TYPE REF TO cl_salv_display_settings,
          l_title             TYPE lvc_title.

*    l_title = 'text-t01'.
    lr_display_settings = gr_table->get_display_settings( ).
    lr_display_settings->set_list_header( |Revaloración de Inventario| ).

*... §7 display the table
    gr_table->set_screen_popup(
      start_column = 1
      end_column   = 100
      start_line   = 1
      end_line     = 20 ).

  ENDMETHOD.

  METHOD handle_double_click.

    IF editable EQ abap_true.
      me->check_changes( ).
    ENDIF.

    editable = abap_false.

    CASE  e_salv_function.
      WHEN 'LOAD'.
        me->carga_archivo( ).
      WHEN 'SHOW'.
        me->mostrar_archivo( ).
      WHEN 'DIST1'.
        me->set_sort( i_sort = '1' ).
      WHEN 'DIST2'.
        me->set_sort( i_sort = '2' ).
      WHEN 'DIST3'.
        me->set_sort( i_sort = '3' ).
      WHEN 'EDIT'.
        DATA(lt_field_to_edit) = VALUE t_fields( ( fields = 'MATNR' ) ).
        me->set_editable( i_fields = lt_field_to_edit ).
        editable = abap_true.
      WHEN 'SAVE'.
        IF send_message( i_type_message = 'P'
                         i_conf    = abap_true
                         i_message = |Grabar los datos?| ) EQ abap_true.
          IF me->save_data( ) EQ abap_true.
            send_message( i_type_message = 'W'
                          i_message = |Los datos se grabaron| ).
          ELSE.
            send_message( i_type_message = 'E'
                          i_message = |No se pudo grabar| ).
          ENDIF.
        ENDIF.
      WHEN 'CANCEL' OR 'EXIT'.
*       leave popup
*       - (currently) not supported via code &AC1
        me->gr_table->close_screen( ).

    ENDCASE.

  ENDMETHOD.  

  METHOD load_cnst.
*    LOAD ZIM_CNST
    i_ok = abap_true.
  ENDMETHOD.

  method MOSTRAR_ARCHIVO.
  endmethod.  

  method SAVE_DATA.
  endmethod.  

  method SEND_MESSAGE.
  endmethod.  

  METHOD set_columns.
    DATA: lr_columns TYPE REF TO cl_salv_columns_table,
          lr_column  TYPE REF TO cl_salv_column_table.
    lr_columns = io_table->get_columns( ).
    lr_columns->set_optimize( abap_true ).

*    PERFORM set_colnumns_technical USING lr_columns.

*... §4 set hotspot column

    TRY.
        lr_column ?= lr_columns->get_column( 'MATNR' ).
*        lr_column->set_edit_mask( value =  ).
*        lr_column->set_short_text( value = 'rrrr' ).
*        lr_column->set_long_text( value = 'rrrrrrrrrr' ).

        lr_column ?= lr_columns->get_column( 'LIFNR' ).
*        lr_column->set_edit_mask( value =  ).
*        lr_column->set_short_text( value = 'xxxx' ).
*        lr_column->set_long_text( value = 'xxxxxxxx' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

    TRY.
        lr_column ?= lr_columns->get_column( 'ICON' ).
        lr_column->set_icon( if_salv_c_bool_sap=>true ).
        lr_column->set_long_text( 'Archivo' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

  ENDMETHOD.  

  METHOD set_editable.
**********************************************************************
*------------- PARA ALV EDITABLE UNICAMENTE
**********************************************************************
*type required for correct casting
    DATA: lo_model     TYPE REF TO cl_salv_model,
          o_adapter    TYPE REF TO cl_salv_adapter,
          lo_grid      TYPE REF TO cl_gui_alv_grid,
          lo_full_adap TYPE REF TO cl_salv_fullscreen_adapter.

    CHECK gr_table IS BOUND.

    TRY.
*   Narrow casting
        lo_model ?= me->gr_table.
*   Object for the local inherited class from the CL_SALV_MODEL_LIST
        o_adapter ?= lo_model->r_controller->r_adapter.
*   Adapter
        lo_full_adap ?= o_adapter.
*   Get the Grid
        lo_grid = lo_full_adap->get_grid( ).
    ENDTRY.

*   Get catalog via grid
    DATA lt_fcat TYPE lvc_t_fcat.

    IF lo_grid IS BOUND.
      lo_grid->get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = lt_fcat ).
    ENDIF.
*    Get catalog via controller
*    DATA(rt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog(
*          r_columns = gr_table->get_columns( ) " ALV Filter
*          r_aggregations = gr_table->get_aggregations( ) " ALV Aggregations
*          ).

*    Editable ALV - all
*    DATA: ls_layout TYPE lvc_s_layo.
*    ls_layout-edit = 'X'.
*    CALL METHOD lo_grid->set_frontend_layout EXPORTING is_layout = ls_layout.

    LOOP AT i_fields REFERENCE INTO DATA(field).
      TRY .
          lt_fcat[ fieldname = field->*-fields ]-edit = abap_true.
      ENDTRY.
    ENDLOOP.

    lo_grid->set_frontend_fieldcatalog( it_fieldcatalog = lt_fcat ).

*    lo_grid->check_changed_data( ).
*   refresh the table
    CALL METHOD lo_grid->refresh_table_display.
**********************************************************************

  ENDMETHOD.

  METHOD set_events.
    DATA: lr_events TYPE REF TO cl_salv_events_table.
    lr_events = gr_table->get_event( ).

*    CREATE OBJECT gr_events.
*
**... §6.1 register to the event USER_COMMAND
    SET HANDLER me->handle_double_click FOR lr_events.
**... §6.2 register to the event BEFORE_SALV_FUNCTION
*    SET HANDLER gr_events->on_before_salv_function FOR lr_events.
**... §6.3 register to the event AFTER_SALV_FUNCTION
*    SET HANDLER gr_events->on_after_salv_function FOR lr_events.
**... §6.4 register to the event DOUBLE_CLICK
*    SET HANDLER gr_events->on_double_click FOR lr_events.
**... §6.5 register to the event LINK_CLICK
*    SET HANDLER gr_events->on_link_click FOR lr_events.

  ENDMETHOD.

  METHOD set_functions.
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE string,
          l_icon       TYPE string.

    lr_functions = io_table->get_functions( ).
    lr_functions->set_all( abap_true ).
*    lr_functions->set_all( abap_false ).
    TRY .
        CALL METHOD io_table->set_screen_status
          EXPORTING
            report   = 'SAPLZFG_RT_BAU_UTIL'
            pfstatus = 'REVINV_POPUP'.

      CATCH cx_root.

    ENDTRY.

*... §3.2 include own functions
*    TRY.
*        l_text = 'Descargar Archivo'.
*        l_icon = icon_complete.
*        lr_functions->add_function(
*        name     = 'DESCARGA'
*        icon     = l_icon
*        text     = l_text
*        tooltip  = l_text
*        position = if_salv_c_function_position=>right_of_salv_functions ).
**        lr_functions->set_group_export(
**            value = if_salv_c_bool_sap=>true
**        ).
*      CATCH cx_salv_not_found.    "
*      CATCH cx_salv_wrong_call .
*      CATCH cx_salv_existing.
*      CATCH cx_root.
*    ENDTRY.

  ENDMETHOD.  

  METHOD set_sort.
**********************************************************************
*------------- PARA SORT
**********************************************************************
    CHECK gr_table IS BOUND.

    DATA(sort) = me->gr_table->get_sorts( ).
    sort->clear( ).

    CASE i_sort.
      WHEN '1'.
        TRY.
            sort->add_sort( columnname = 'MATNR' ) .
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
      WHEN '2'.
        TRY.
            sort->add_sort( columnname = 'LIFNR' ).
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
      WHEN OTHERS.
        TRY.
            sort->add_sort( EXPORTING
              columnname = 'LIFNR'
              position = 1 ).
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
        TRY.
            sort->add_sort( EXPORTING
              columnname = 'MATNR'
              position = 2 ).
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
    ENDCASE.

    gr_table->refresh(
      EXPORTING
*        s_stable     =
        refresh_mode = IF_SALV_C_REFRESH=>SOFT
    ).
**********************************************************************
  ENDMETHOD.  

  METHOD update_icon.

**********************************************************************
*------------- PARA ALV MODIFICACIONES
**********************************************************************
    CHECK gt_outab IS BOUND.
    FIELD-SYMBOLS <fst> TYPE ANY TABLE.

    ASSIGN gt_outab->* TO <fst>.

    LOOP AT <fst> ASSIGNING FIELD-SYMBOL(<fs>).
      ASSIGN COMPONENT 'ICON' OF STRUCTURE <fs> TO FIELD-SYMBOL(<fsf>).
*TODO validar cond catch exception
      <fsf> = COND #( WHEN <fsf> IS ASSIGNED
                      THEN COND icon_d( WHEN i_filed EQ abap_true THEN icon_okay ELSE icon_cancel ) ).
    ENDLOOP.
**********************************************************************
  ENDMETHOD.  
  