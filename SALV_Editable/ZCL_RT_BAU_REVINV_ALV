""""""""""""""""""""""" STATUS is defined in a FG and loaded via Object Name   
CLASS zcl_rt_bau_revinv_alv DEFINITION
  PUBLIC
  INHERITING FROM cl_salv_model_list
  CREATE PUBLIC .

  PUBLIC SECTION.

    INTERFACES zif_rt_bau_rep_acc .

    EVENTS to_save
      EXPORTING
        VALUE(mod_tab) TYPE REF TO data .

    METHODS display_alv
      IMPORTING
        !i_no_refresh TYPE boolean OPTIONAL .
    METHODS constructor
      IMPORTING
        !i_tab_to_alv TYPE REF TO data .
  PROTECTED SECTION.
  PRIVATE SECTION.

    TYPES:
      BEGIN OF ty_fields,
        fields TYPE string,
      END OF ty_fields .
    TYPES:
      t_fields TYPE STANDARD TABLE OF ty_fields WITH NON-UNIQUE DEFAULT KEY .
    TYPES:
      BEGIN OF ty_cnst,
        fname TYPE fname_021,
        numb  TYPE  tvarv_numb,
        sign  TYPE  tvarv_sign,
        opti  TYPE  tvarv_opti,
        low   TYPE tvarv_val,
        high  TYPE  tvarv_val,
      END OF ty_cnst .
    TYPES:
      tt_cnst TYPE SORTED TABLE OF ty_cnst WITH NON-UNIQUE KEY fname numb .

    DATA dist1 TYPE boolean .
    DATA dist2 TYPE boolean .
    DATA dist3 TYPE boolean .
    DATA gt_outab TYPE REF TO data .
    DATA gt_to_db TYPE REF TO data .
    DATA gr_table TYPE REF TO cl_salv_table .
    DATA gt_cnst TYPE tt_cnst .
    CLASS-DATA c_bo_bau TYPE string VALUE 'BO_BAU' ##NO_TEXT.
    CLASS-DATA c_ip_serv_out TYPE string VALUE 'IP_SERV_OUT' ##NO_TEXT.
    CLASS-DATA c_ip_serv_in TYPE string VALUE 'IP_SERV_IN' ##NO_TEXT.
    CLASS-DATA parser TYPE char1 VALUE ',' ##NO_TEXT.
    CLASS-DATA k1 TYPE string VALUE 'MATNR' ##NO_TEXT.
    CLASS-DATA k2 TYPE string VALUE 'LIFNR' ##NO_TEXT.
    CLASS-DATA k3 TYPE string VALUE 'ICON' ##NO_TEXT.

    METHODS save_data
      CHANGING
        !o_tab      TYPE REF TO data OPTIONAL
      RETURNING
        VALUE(i_ok) TYPE boolean .
    METHODS atta_borrar .
    METHODS add_to_mod_db
      IMPORTING
        !i_line TYPE REF TO data .
    METHODS get_regs_from_dist
      RETURNING
        VALUE(r_tab) TYPE REF TO data .
    METHODS save_sequence
      RETURNING
        VALUE(r_ok) TYPE boolean .
    METHODS get_tabkey_from_sel
      IMPORTING
        !i_to_parse     TYPE boolean OPTIONAL
      RETURNING
        VALUE(r_tabkey) TYPE string .
    METHODS check_changes .
    METHODS load_cnst
      RETURNING
        VALUE(i_ok) TYPE boolean .
    METHODS send_message
      IMPORTING
        !i_type_message TYPE char1
        !i_conf         TYPE boolean OPTIONAL
        !i_message      TYPE string
      RETURNING
        VALUE(r_ok)     TYPE boolean .
    METHODS atta_carga
      RETURNING
        VALUE(i_ok) TYPE boolean .
    METHODS atta_mostrar .
    METHODS set_sort
      IMPORTING
        !i_sort       TYPE char01
        !i_no_refresh TYPE boolean OPTIONAL .
    METHODS update_icon
      IMPORTING
        !i_field TYPE string
        !i_tab   TYPE REF TO data
        !i_filed TYPE boolean .
    METHODS set_editable
      IMPORTING
        !i_fields TYPE t_fields .
    METHODS set_columns
      CHANGING
        !io_table TYPE REF TO cl_salv_table .
    METHODS set_functions
      CHANGING
        !io_table TYPE REF TO cl_salv_table .
    METHODS create_alv
      CHANGING
        !i_tab TYPE ANY TABLE .
    METHODS user_commando
          FOR EVENT added_function OF cl_salv_events
      IMPORTING
          !e_salv_function .
    METHODS set_events
      CHANGING
        !io_table TYPE REF TO cl_salv_table .
    METHODS handle_data_changed
          FOR EVENT data_changed OF cl_gui_alv_grid
      IMPORTING
          !er_data_changed .
ENDCLASS.



CLASS ZCL_RT_BAU_REVINV_ALV IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ADD_TO_MOD_DB
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_LINE                         TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD add_to_mod_db.
    FIELD-SYMBOLS: <fs_inline> TYPE any,
                   <fs_outab>  TYPE ANY TABLE, "global tab with master data
                   <fs_modtab> TYPE STANDARD TABLE. "data to be updated in db
    ASSIGN gt_outab->* TO <fs_outab>.
    ASSIGN i_line->* TO <fs_inline>.

    IF gt_to_db IS NOT BOUND.
      CREATE DATA gt_to_db LIKE <fs_outab>.
    ENDIF.
    ASSIGN gt_to_db->* TO <fs_modtab>.

    INSERT <fs_inline> INTO TABLE <fs_modtab> .
    SORT <fs_modtab> DESCENDING BY ('MATNR').
    DELETE ADJACENT DUPLICATES FROM <fs_modtab> COMPARING ('MATNR').
*     <fs_modtab> FROM <fs_inline>.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ATTA_BORRAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD atta_borrar.
    DATA: go_myobject TYPE REF TO cl_gos_manager,
          w_logsys    TYPE tbdls-logsys,
          w_container TYPE REF TO cl_gui_custom_container.

*    CONCATENATE ws_acdos-znumcon ws_acdos-lifnr ws_acdos-abtnr INTO obj-objkey.
    DATA(objtype) = VALUE saeobjid( gt_cnst[ fname = c_bo_bau ]-low OPTIONAL ).
    DATA(ip_service) = VALUE sgs_srvnam( gt_cnst[ fname = c_ip_serv_out ]-low OPTIONAL ).

    CHECK objtype IS NOT INITIAL AND ip_service IS NOT INITIAL.

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system             = w_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    DATA(obj) = VALUE borident( objtype = objtype
                                objkey = me->get_tabkey_from_sel( )
                                logsys = w_logsys   ). "Info Object // objtype = nombre del Bisness Object
    DATA(mode) = 'E'.
    CREATE OBJECT go_myobject
      EXPORTING
        is_object = obj
        ip_mode   = mode
*       ip_no_commit = 'X' ""attachments should only be saved by own commits
      EXCEPTIONS
        OTHERS    = 1.

    go_myobject->unpublish( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ATTA_CARGA
* +-------------------------------------------------------------------------------------------------+
* | [<-()] I_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD atta_carga.

    DATA: go_myobject TYPE REF TO cl_gos_manager,
          w_logsys    TYPE tbdls-logsys,
          w_container TYPE REF TO cl_gui_custom_container.

    DATA(objtype) = VALUE saeobjid( gt_cnst[ fname = c_bo_bau ]-low OPTIONAL ).
    DATA(ip_service) = VALUE sgs_srvnam( gt_cnst[ fname = c_ip_serv_in ]-low OPTIONAL ).

    CHECK objtype IS NOT INITIAL AND ip_service IS NOT INITIAL.

    CREATE OBJECT go_myobject.

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system             = w_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    DATA(obj) = VALUE borident( objtype = objtype
                                objkey = me->get_tabkey_from_sel( )
                                logsys = w_logsys   ). "Info Object // objtype = nombre del Bisness Object

    CALL METHOD go_myobject->start_service_direct
      EXPORTING
        ip_service       = ip_service
        is_object        = obj
        io_container     = w_container
      EXCEPTIONS
        no_object        = 1
        object_invalid   = 2
        execution_failed = 3
        OTHERS           = 4.
    CASE sy-subrc.
      WHEN 0.
        COMMIT WORK.
        IF sy-subrc IS INITIAL.
          i_ok = abap_true.
        ENDIF.
    ENDCASE.
**********************************************************************
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->ATTA_MOSTRAR
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD atta_mostrar.
    DATA: go_myobject TYPE REF TO cl_gos_manager,
          w_logsys    TYPE tbdls-logsys,
          w_container TYPE REF TO cl_gui_custom_container.

    DATA(objtype) = VALUE saeobjid( gt_cnst[ fname = c_bo_bau ]-low OPTIONAL ).
    DATA(ip_service) = VALUE sgs_srvnam( gt_cnst[ fname = c_ip_serv_out ]-low OPTIONAL ).

    CHECK objtype IS NOT INITIAL AND ip_service IS NOT INITIAL.

    CALL FUNCTION 'OWN_LOGICAL_SYSTEM_GET'
      IMPORTING
        own_logical_system             = w_logsys
      EXCEPTIONS
        own_logical_system_not_defined = 1
        OTHERS                         = 2.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.

    DATA(obj) = VALUE borident( objtype = objtype
                                objkey = me->get_tabkey_from_sel( )
                                logsys = w_logsys   ). "Info Object // objtype = nombre del Bisness Object

    CREATE OBJECT go_myobject
      EXPORTING
        is_object = obj
        ip_mode   = 'E' "display
*       ip_no_commit = 'X' ""attachments should only be saved by own commits
      EXCEPTIONS
        OTHERS    = 1.
* Llama servicio
    CALL METHOD go_myobject->start_service_direct
      EXPORTING
        ip_service       = ip_service
        is_object        = obj
        io_container     = w_container
      EXCEPTIONS
        no_object        = 1
        object_invalid   = 2
        execution_failed = 3
        OTHERS           = 4.
    IF sy-subrc <> 0.
      MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
                 WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->CHECK_CHANGES
* +-------------------------------------------------------------------------------------------------+
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD check_changes.
**********************************************************************
*------------- PARA ALV EDITABLE UNICAMENTE
**********************************************************************
*type required for correct casting
    DATA: lo_model     TYPE REF TO cl_salv_model,
          o_adapter    TYPE REF TO cl_salv_adapter,
          lo_grid      TYPE REF TO cl_gui_alv_grid,
          lo_full_adap TYPE REF TO cl_salv_fullscreen_adapter.

    CHECK gr_table IS BOUND.

    TRY.
*   Narrow casting
        lo_model ?= me->gr_table.
*   Object for the local inherited class from the CL_SALV_MODEL_LIST
        o_adapter ?= lo_model->r_controller->r_adapter.
*   Adapter
        lo_full_adap ?= o_adapter.
*   Get the Grid
        lo_grid = lo_full_adap->get_grid( ).
    ENDTRY.
    lo_grid->check_changed_data( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_ALV->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB_TO_ALV                   TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    FIELD-SYMBOLS: <out_tab> TYPE ANY TABLE,
                   <in_tab>  TYPE ANY TABLE.
    DATA out_tab TYPE REF TO data.

**********************************************************************
*    Super class needed for editable ALV
    super->constructor( ).
**********************************************************************

    IF i_tab_to_alv IS BOUND.
      ASSIGN i_tab_to_alv->* TO <in_tab>.
      CREATE DATA out_tab LIKE <in_tab>.
      ASSIGN out_tab->* TO <out_tab>.
      <out_tab> = <in_tab>.
      GET REFERENCE OF <out_tab> INTO gt_outab.
      me->create_alv( CHANGING i_tab = <out_tab> ).
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->CREATE_ALV
* +-------------------------------------------------------------------------------------------------+
* | [<-->] I_TAB                          TYPE        ANY TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD create_alv.
    CHECK me->load_cnst( ) EQ abap_true.
*... §2 create an ALV table
    TRY.
        cl_salv_table=>factory(
        IMPORTING
          r_salv_table   = gr_table
        CHANGING
          t_table        = i_tab ).
      CATCH cx_salv_msg.                                "#EC NO_HANDLER
    ENDTRY.

*... §3.1 activate ALV generic Functions

    me->set_functions( CHANGING io_table = gr_table ).

*... set the columns technical

    me->set_columns( CHANGING io_table = gr_table ).

*... §6 register to the events of cl_salv_table

    me->set_events( CHANGING io_table = gr_table ).

*... §7.1 set selection mode
    DATA(lr_selections) = gr_table->get_selections( ).
    lr_selections->set_selection_mode( if_salv_c_selection_mode=>single ).

*... set list title

    DATA: lr_display_settings TYPE REF TO cl_salv_display_settings,
          l_title             TYPE lvc_title.

*    l_title = 'text-t01'.
    lr_display_settings = gr_table->get_display_settings( ).
    lr_display_settings->set_list_header( |Revaloración de Inventario| ).

*... §7 display the table
    gr_table->set_screen_popup(
      start_column = 1
      end_column   = 100
      start_line   = 1
      end_line     = 20 ).

    me->set_sort(
      EXPORTING
        i_sort    =  '1'   " Campo de texto, longitud 1
        i_no_refresh = abap_true
    ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_ALV->DISPLAY_ALV
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_NO_REFRESH                   TYPE        BOOLEAN(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD display_alv.
    IF gr_table IS BOUND AND i_no_refresh IS INITIAL.
      gr_table->refresh( ).
    ELSE.
      gr_table->display( ).
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->GET_REGS_FROM_DIST
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_TAB                          TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_regs_from_dist.
    FIELD-SYMBOLS: <fs_intab> TYPE ANY TABLE,
                   <fs_outab> TYPE STANDARD TABLE.
    DATA lr TYPE REF TO data.

    SPLIT get_tabkey_from_sel( abap_true ) AT parser INTO: DATA(k1_data)
                                                           DATA(k2_data).

    CREATE DATA r_tab TYPE TABLE OF REF TO data.
    ASSIGN r_tab->* TO <fs_outab>.

    ASSIGN gt_outab->* TO <fs_intab>.

    IF dist1 EQ abap_true.
      DATA(cond) = |{ k1 } = { k1_data }|.
      LOOP AT <fs_intab> ASSIGNING FIELD-SYMBOL(<fs_line>) WHERE (cond).
        GET REFERENCE OF <fs_line> INTO lr.
        APPEND lr TO <fs_outab>.
      ENDLOOP.
    ELSEIF dist2 EQ abap_true.

    ELSEIF dist3 EQ abap_true.

    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->GET_TABKEY_FROM_SEL
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TO_PARSE                     TYPE        BOOLEAN(optional)
* | [<-()] R_TABKEY                       TYPE        STRING
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD get_tabkey_from_sel.
    DATA(lt_sel_cel) = gr_table->get_selections( )->get_selected_cells( ).
    CHECK lines( lt_sel_cel  ) IS NOT INITIAL.

    FIELD-SYMBOLS: <fst> TYPE ANY TABLE.

    ASSIGN gt_outab->* TO <fst>.

    LOOP AT <fst> ASSIGNING FIELD-SYMBOL(<fsl>).
      IF sy-tabix EQ lt_sel_cel[ 1 ]-row.
        ASSIGN COMPONENT k1 OF STRUCTURE <fsl> TO FIELD-SYMBOL(<k1>).
        ASSIGN COMPONENT k2 OF STRUCTURE <fsl> TO FIELD-SYMBOL(<k2>).
      ENDIF.
    ENDLOOP.
    r_tabkey = |{ <k1> }{ COND #( WHEN i_to_parse EQ abap_true THEN parser ELSE '' ) }{ <k2> }|.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->HANDLE_DATA_CHANGED
* +-------------------------------------------------------------------------------------------------+
* | [--->] ER_DATA_CHANGED                LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_data_changed.
    DATA line_to_mod TYPE REF TO data.
    FIELD-SYMBOLS <mp_mod_rows> TYPE ANY TABLE.

    ASSIGN er_data_changed->mp_mod_rows->* TO <mp_mod_rows>.
    LOOP AT <mp_mod_rows> ASSIGNING FIELD-SYMBOL(<fs_line>).
      GET REFERENCE OF <fs_line> INTO line_to_mod.
      me->add_to_mod_db( i_line = line_to_mod ).
    ENDLOOP.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->LOAD_CNST
* +-------------------------------------------------------------------------------------------------+
* | [<-()] I_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_cnst.
*    LOAD ZIM_CNST
*ZZMOD  ZZMOD
*    rt
*ZZPROYT  ZZPROYT
*bau
*REPID  PROGRAMM
*zcl_rt_bau_revinv
*FNAME  FNAME_021

*NUMB	TVARV_NUMB
*SIGN	TVARV_SIGN
*OPTI	TVARV_OPTI
*LOW  TVARV_VAL
*HIGH	TVARV_VAL
    SELECT * FROM zim_cnst
      INTO CORRESPONDING FIELDS OF TABLE gt_cnst
      WHERE zzmod = 'RT'
      AND zzproyt = 'BAU'
      AND repid = sy-repid.

    gt_cnst = VALUE #( ( fname = c_bo_bau numb = 1 low = 'ZBUS_BONIF' )
                       ( fname = c_ip_serv_in numb = 1 low = 'ARL_LINK' )
                       ( fname = c_ip_serv_out numb = 1 low = 'ARL_LINK' ) ).

    IF lines( gt_cnst ) IS NOT INITIAL.
      i_ok = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SAVE_DATA
* +-------------------------------------------------------------------------------------------------+
* | [<-->] O_TAB                          TYPE REF TO DATA(optional)
* | [<-()] I_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_data.
*    FIELD-SYMBOLS: <fs_db>  TYPE ANY TABLE.

    CHECK gt_to_db IS BOUND.
*    ASSIGN gt_to_db->* TO <fs_db>.

    i_ok = abap_true.

    RAISE EVENT to_save EXPORTING mod_tab = gt_to_db.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SAVE_SEQUENCE
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_sequence.
    r_ok = abap_true.
    CHECK gt_to_db IS BOUND.
    IF send_message( i_type_message = 'P'
                 i_conf    = abap_true
                 i_message = |{ text-m01 }| ) EQ abap_true.
      IF me->save_data( ) EQ abap_true.
        send_message( i_type_message = 'S'
                      i_message = |{ text-m02 }| ).
      ELSE.
        send_message( i_type_message = 'E'
                      i_message = |{ text-m03 }| ).
        r_ok = abap_false.
      ENDIF.
    ENDIF.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SEND_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TYPE_MESSAGE                 TYPE        CHAR1
* | [--->] I_CONF                         TYPE        BOOLEAN(optional)
* | [--->] I_MESSAGE                      TYPE        STRING
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD send_message.
    CASE i_type_message.
      WHEN 'P'.
        DATA(ans) = ''.
        CALL FUNCTION 'POPUP_TO_CONFIRM'
          EXPORTING
*           titlebar      = SPACE
*           diagnose_object       = SPACE
            text_question = i_message
          IMPORTING
            answer        = ans.
        IF sy-subrc <> 0.
*     MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
*                WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
        ENDIF.
        r_ok = COND #( WHEN ans EQ 1 THEN abap_true ELSE abap_false ).
      WHEN OTHERS.
        MESSAGE i_message TYPE i_type_message DISPLAY LIKE 'W'.
    ENDCASE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_COLUMNS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] IO_TABLE                       TYPE REF TO CL_SALV_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_columns.
    DATA: lr_columns TYPE REF TO cl_salv_columns_table,
          lr_column  TYPE REF TO cl_salv_column_table.

    lr_columns = io_table->get_columns( ).
    lr_columns->set_optimize( abap_true ).

    TRY.
        lr_column ?= lr_columns->get_column( 'MATNR' ).
*        lr_column->set_edit_mask( value =  ).
*        lr_column->set_short_text( value = 'rrrr' ).
*        lr_column->set_long_text( value = 'rrrrrrrrrr' ).

        lr_column ?= lr_columns->get_column( 'LIFNR' ).
*        lr_column->set_edit_mask( value =  ).
*        lr_column->set_short_text( value = 'xxxx' ).
*        lr_column->set_long_text( value = 'xxxxxxxx' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

* Set ICON column
    TRY.
        lr_column ?= lr_columns->get_column( 'ICON' ).
        lr_column->set_icon( if_salv_c_bool_sap=>true ).
        lr_column->set_long_text( 'Archivo' ).
      CATCH cx_salv_not_found.                          "#EC NO_HANDLER
    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_EDITABLE
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FIELDS                       TYPE        T_FIELDS
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_editable.
**********************************************************************
*------------- PARA ALV EDITABLE UNICAMENTE
**********************************************************************
*type required for correct casting
    DATA: lo_model     TYPE REF TO cl_salv_model,
          o_adapter    TYPE REF TO cl_salv_adapter,
          lo_grid      TYPE REF TO cl_gui_alv_grid,
          lo_full_adap TYPE REF TO cl_salv_fullscreen_adapter.

    CHECK gr_table IS BOUND.

    TRY.
*   Narrow casting
        lo_model ?= me->gr_table.
*   Object for the local inherited class from the CL_SALV_MODEL_LIST
        o_adapter ?= lo_model->r_controller->r_adapter.
*   Adapter
        lo_full_adap ?= o_adapter.
*   Get the Grid
        lo_grid = lo_full_adap->get_grid( ).
    ENDTRY.

*   Get catalog via grid
    DATA lt_fcat TYPE lvc_t_fcat.

    IF lo_grid IS BOUND.
      lo_grid->get_frontend_fieldcatalog( IMPORTING et_fieldcatalog = lt_fcat ).
    ENDIF.
*    Get catalog via controller
*    DATA(rt_fcat) = cl_salv_controller_metadata=>get_lvc_fieldcatalog(
*          r_columns = gr_table->get_columns( ) " ALV Filter
*          r_aggregations = gr_table->get_aggregations( ) " ALV Aggregations
*          ).

*    Editable ALV - all
*    DATA: ls_layout TYPE lvc_s_layo.
*    ls_layout-edit = 'X'.
*    CALL METHOD lo_grid->set_frontend_layout EXPORTING is_layout = ls_layout.

    LOOP AT i_fields REFERENCE INTO DATA(field).
      TRY .
          lt_fcat[ fieldname = field->*-fields ]-edit = abap_true.
      ENDTRY.
    ENDLOOP.

    lo_grid->set_frontend_fieldcatalog( it_fieldcatalog = lt_fcat ).

    SET HANDLER me->handle_data_changed FOR lo_grid.
*    lo_grid->check_changed_data( ).
*   refresh the table
    CALL METHOD lo_grid->refresh_table_display.
**********************************************************************

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_EVENTS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] IO_TABLE                       TYPE REF TO CL_SALV_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_events.
    DATA: lr_events TYPE REF TO cl_salv_events_table.
    lr_events = gr_table->get_event( ).

*    CREATE OBJECT gr_events.
*
**... §6.1 register to the event USER_COMMAND
    SET HANDLER me->user_commando FOR lr_events.
**... §6.2 register to the event BEFORE_SALV_FUNCTION
*    SET HANDLER gr_events->on_before_salv_function FOR lr_events.
**... §6.3 register to the event AFTER_SALV_FUNCTION
*    SET HANDLER gr_events->on_after_salv_function FOR lr_events.
**... §6.4 register to the event DOUBLE_CLICK
*    SET HANDLER gr_events->on_double_click FOR lr_events.
**... §6.5 register to the event LINK_CLICK
*    SET HANDLER gr_events->on_link_click FOR lr_events.


  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_FUNCTIONS
* +-------------------------------------------------------------------------------------------------+
* | [<-->] IO_TABLE                       TYPE REF TO CL_SALV_TABLE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_functions.
    DATA: lr_functions TYPE REF TO cl_salv_functions_list,
          l_text       TYPE string,
          l_icon       TYPE string.

    lr_functions = io_table->get_functions( ).
    lr_functions->set_all( abap_true ).
    TRY .
        CALL METHOD io_table->set_screen_status
          EXPORTING
            report   = 'SAPLZFG_RT_BAU_UTIL'
            pfstatus = 'REVINV_POPUP'.

      CATCH cx_root.

    ENDTRY.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->SET_SORT
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_SORT                         TYPE        CHAR01
* | [--->] I_NO_REFRESH                   TYPE        BOOLEAN(optional)
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_sort.
**********************************************************************
*------------- PARA SORT
**********************************************************************
    CHECK gr_table IS BOUND.

    DATA(sort) = me->gr_table->get_sorts( ).
    sort->clear( ).
    CLEAR: dist1, dist2, dist3.
    CASE i_sort.
      WHEN '1'.
        TRY.
            sort->add_sort( columnname = |{ k1 }| ) .
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
        dist1 = abap_true.
      WHEN '2'.
        TRY.
            sort->add_sort( columnname = |{ k2 }| ).
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
        dist2 = abap_true.
      WHEN OTHERS.
        TRY.
            sort->add_sort( EXPORTING
              columnname = |{ k1 }|
              position = 1 ).
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
        TRY.
            sort->add_sort( EXPORTING
              columnname = |{ k2 }|
              position = 2 ).
          CATCH cx_salv_not_found.    "
          CATCH cx_salv_existing.    "
          CATCH cx_salv_data_error.    "
        ENDTRY.
        dist3 = abap_true.
    ENDCASE.
    IF i_no_refresh EQ abap_false.
      me->display_alv( ).
    ENDIF.
**********************************************************************
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->UPDATE_ICON
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_FIELD                        TYPE        STRING
* | [--->] I_TAB                          TYPE REF TO DATA
* | [--->] I_FILED                        TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD update_icon.
    FIELD-SYMBOLS: <fs_intab>  TYPE ANY TABLE. "incoming tab
    DATA out_line TYPE REF TO data.

    CHECK i_tab IS BOUND.

    ASSIGN i_tab->* TO <fs_intab>.

    LOOP AT <fs_intab> ASSIGNING FIELD-SYMBOL(<fs_line>).
      ASSIGN <fs_line>->* TO FIELD-SYMBOL(<fs_st>).
      ASSIGN COMPONENT i_field OF STRUCTURE <fs_st> TO FIELD-SYMBOL(<fs_field>).
      " modify global master data
      <fs_field> = COND #( WHEN <fs_field> IS ASSIGNED
                      THEN COND icon_d( WHEN i_filed EQ abap_true THEN icon_okay ELSE icon_cancel ) ).
      " append modified reg to update db
      GET REFERENCE OF <fs_st> INTO out_line.
      me->add_to_mod_db( i_line = out_line ).
    ENDLOOP.

    me->display_alv( ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_ALV->USER_COMMANDO
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_SALV_FUNCTION                LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD user_commando.

*    IF editable EQ abap_true.
    me->check_changes( ).
*    ENDIF.

    CASE  e_salv_function.
      WHEN 'LOAD'.
        IF me->atta_carga( ) EQ abap_true.
          update_icon(
            EXPORTING
              i_field = k3
              i_filed = abap_true
              i_tab   = me->get_regs_from_dist( )
          ).
        ENDIF.
      WHEN 'SHOW'.
        me->atta_mostrar( ).
      WHEN 'DIST1'.
        me->set_sort( i_sort = '1' ).
      WHEN 'DIST2'.
        me->set_sort( i_sort = '2' ).
      WHEN 'DIST3'.
        me->set_sort( i_sort = '3' ).
      WHEN 'EDIT'.
        DATA(lt_field_to_edit) = VALUE t_fields( ( fields = k1 ) ).
        me->set_editable( i_fields = lt_field_to_edit ).
      WHEN 'SAVE'.
        me->save_sequence( ).
      WHEN 'CANCEL' OR 'EXIT'.
*       leave popup
*       - (currently) not supported via code &AC1
        me->gr_table->close_screen( ).

    ENDCASE.

  ENDMETHOD.
ENDCLASS.