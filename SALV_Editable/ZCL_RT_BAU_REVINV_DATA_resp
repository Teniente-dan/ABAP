class ZCL_RT_BAU_REVINV_DATA definition
  public
  final
  create public .

public section.

  interfaces ZIF_RT_BAU_REP_ACC
      all methods final .

  types:
    BEGIN OF ty_result,
        lifnr TYPE wkbp-lifnr,
        mc    TYPE  konp-kbetr,
      END OF ty_result .
  types:
    tt_result TYPE SORTED TABLE OF ty_result WITH NON-UNIQUE KEY lifnr .

  methods CONSTRUCTOR
    importing
      !I_TAB type ref to DATA .
  PROTECTED SECTION.
PRIVATE SECTION.

  TYPES:
    BEGIN OF ty_to_alv,
      kbeln  TYPE  wkbp-kbeln, "cambio de precio
      matnr  TYPE  wkbp-matnr, "Artículo
      attyp  TYPE  mara-attyp, "Catergoría artículo
      meins  TYPE  mara-meins, "UM
      matkl  TYPE  wkbp-matkl, "Gpo. Artículo
      lifnr  TYPE  wkbp-lifnr, "Proveedor
      pcb    TYPE  konp-kstbw, "PC.Basico
      pcn    TYPE  konp-kstbw, "PC.Neto
      pfn    TYPE  konp-kstbw, "Precio Final ant
      pfa    TYPE  konp-kstbw, "Precio Final nuv
      psg    TYPE  konp-kstbw, "Precio Sugerido
      kbetr  TYPE  konp-kbetr, "MargBruto
      wekgr  TYPE  maw1-wekgr, "Sec Deter PC
      mc     TYPE  konp-kbetr, "Metodo Costo
      icon   TYPE  icon_d,     "Adjunto X-OK
      sap_ob TYPE  saeanwdid,  "TECH objectd id
      file   TYPE  saeobjid,   "TECH file id
      new_f  TYPE  boolean,    "TECH new file
      idx    TYPE  i,          "TECH
    END OF ty_to_alv .
  TYPES:
    tt_to_alv TYPE STANDARD TABLE OF ty_to_alv WITH NON-UNIQUE KEY kbeln matkl lifnr .
  TYPES:
    tt_input     TYPE SORTED TABLE OF bwkbp WITH NON-UNIQUE DEFAULT KEY,
    tt_input_std TYPE STANDARD TABLE OF bwkbp.
  TYPES:
    BEGIN OF ty_control,
      tipo_bon TYPE string,
      motivo   TYPE string,
      dist     TYPE char1,
    END OF ty_control .

  DATA gv_curr_ans TYPE char1 VALUE 'A' ##NO_TEXT.
  DATA gs_control TYPE ty_control .
  DATA:
    gt_cnst TYPE SORTED TABLE OF zim_cnst WITH NON-UNIQUE DEFAULT KEY .
  DATA:
    gt_saved TYPE SORTED TABLE OF zrt_rcmp WITH NON-UNIQUE KEY kbeln matnr secc vkerv .
  DATA gt_to_alv TYPE tt_to_alv .
  DATA gt_tab_to_show TYPE tt_result .

  METHODS handle_to_message
        FOR EVENT to_message OF zcl_rt_bau_revinv_alv
    IMPORTING
        !e_ans .
  METHODS process_data
    IMPORTING
      !i_tab       TYPE REF TO data
    RETURNING
      VALUE(r_tab) TYPE tt_input .
  METHODS handle_to_update
        FOR EVENT to_update OF zcl_rt_bau_revinv_alv
    IMPORTING
        !e_to_update
        !e_info
        !sender .
  METHODS handle_to_end
        FOR EVENT to_end OF zcl_rt_bau_revinv_alv
    IMPORTING
        !sender
        !e_to_end .
  METHODS set_data_to_alv
    IMPORTING
      !i_tab       TYPE tt_input
    RETURNING
      VALUE(r_tab) TYPE tt_to_alv .
  METHODS save_data
    IMPORTING
      !i_tab      TYPE tt_to_alv
    RETURNING
      VALUE(r_ok) TYPE boolean .
  METHODS set_no_option
    IMPORTING
      !i_tab             TYPE tt_input
    RETURNING
      VALUE(r_no_option) TYPE boolean .
  METHODS val_data
    IMPORTING
      !i_tab      TYPE tt_to_alv
    RETURNING
      VALUE(r_ok) TYPE boolean .
  METHODS handle_to_val
        FOR EVENT to_val OF zcl_rt_bau_revinv_alv
    IMPORTING
        !e_to_val
        !sender .
  METHODS handle_to_save
        FOR EVENT to_save OF zcl_rt_bau_revinv_alv
    IMPORTING
        !mod_tab
        !sender .
  METHODS load_cnst
    RETURNING
      VALUE(r_ok) TYPE boolean .
ENDCLASS.



CLASS ZCL_RT_BAU_REVINV_DATA IMPLEMENTATION.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_DATA->CONSTRUCTOR
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB                          TYPE REF TO DATA
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD constructor.
    DATA: data_to_alv TYPE REF TO data.
*TODO:
*1 - Acuerdos Comerciales

*    CHECK i_tab IS BOUND.
*Transforma los datos de VKPX
    DATA(lt_intab) = me->process_data( i_tab = i_tab ).
*Determina si se permiten opciones
    DATA(no_option) = set_no_option( i_tab = lt_intab ).
*Completa la información con Acuerdos comerciales
    gt_to_alv = set_data_to_alv( i_tab = lt_intab ).
*Recupera Doc cambio de precio, todos los registros traen el mismo
    DATA(in_doc) = VALUE #( gt_to_alv[ 1 ]-kbeln OPTIONAL ).
    CHECK in_doc IS NOT INITIAL.
*Permite cancelar el proceso y regresar a la pantalla de opcion de bonificación
    WHILE gv_curr_ans = 'A'. "A = Cancelar - Popup
*Registra manejador para evento de respuesta de mensajes
      SET HANDLER me->handle_to_message.
*Llama pantalla "Aplica bonificación?" por FM
      CALL FUNCTION 'ZMF_RT_BAU_VKPX'
        EXPORTING
          i_screen_call = '200'         " Pantalla a llamar; 200 bonificar? 300 resultado resumen
          i_doc         = |{ in_doc }|  " Documento de cambio de precio
          i_no_option   = no_option     " true = no hay opciones; false = sí hay opciones
        CHANGING
          ch_tipo_bon   = gs_control-tipo_bon  " Tipo de bonificación
          ch_motivo     = gs_control-motivo    " Texto motivo de bonificación
          ch_dist       = gs_control-dist.      " Prov. 1 ; Prov/Sección 2
*Si motivo es vacio = no hay bonificación
      CHECK gs_control-motivo IS NOT INITIAL.
*Arma llave para interpretar datos mandados a salida ALV; info en -->tipo: ty_fields
      DATA(key_to_alv) = VALUE zcl_rt_bau_revinv_alv=>tt_fields(
        ( field = 'KBELN' key = abap_true sort = 1 )
        ( field = 'LIFNR' key = abap_true sort = 2 )
        ( field = 'MATKL' key = abap_true sort = COND #( WHEN gs_control-dist EQ 2 THEN 3 ) )
        ( field = 'IDX'   key = abap_true idx = abap_true tech = abap_true  )
        ( field = 'MC'    edit = abap_true )
        ( field = 'ICON'  text = |Archivo| icon = abap_true )
        ( field = 'PCB'   text = |PC.Basico| )
        ( field = 'PCN'   text = |PC.Neto| )
        ( field = 'PFN'   text = |Precio Final ant| )
        ( field = 'PFA'   text = |Precio Final nuv| )
        ( field = 'PSG'   text = |Precio Sugerido| )
        ( field = 'KBETR' text = |MargBruto| )
        ( field = 'FILE'  tech = abap_true )
        ( field = 'SAP_OB' tech = abap_true )
        ( field = 'NEW_F' tech = abap_true )
      ).

      GET REFERENCE OF gt_to_alv INTO data_to_alv.
*Instancia objeto para ALV
      DATA(go_alv) = NEW zcl_rt_bau_revinv_alv(
          i_tab_to_alv = data_to_alv
          i_key_fields = key_to_alv
          i_status = COND #( WHEN no_option EQ abap_true THEN |REVINV_POPUP_NO_EDIT| ELSE |REVINV_POPUP| )
      ).
*Registro para manejadores de eventos del objeto ALV
      SET HANDLER me->handle_to_save FOR go_alv. "Para grabar
      SET HANDLER me->handle_to_val FOR go_alv.  "Para validar
      SET HANDLER me->handle_to_update FOR go_alv."Para actualizar
      SET HANDLER me->handle_to_end FOR go_alv. "Para finalizar
**********************************************************************
      go_alv->display_alv( i_no_refresh = abap_true ).
**********************************************************************
*Valida si mostrar resultados: 1 = sí en grabar y salir
      CHECK gv_curr_ans EQ '1'.

*Muestra resultados; tabal GT-TAB_TO_SHOW se llena en manejador de evento HANDLE_TO_END
      CALL FUNCTION 'ZMF_RT_BAU_VKPX'
        EXPORTING
          i_screen_call = '300'          " Pantalla a llamar; 200 bonificar? 300 resultado resumen
          i_tab_to_show = gt_tab_to_show " Resultados a mostrar en 300
          i_doc         = |{ in_doc }|   " Documento de cambio de precio
        CHANGING
          ch_tipo_bon   = gs_control-tipo_bon.    " Tipo de bonificación

    ENDWHILE.

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->HANDLE_TO_END
* +-------------------------------------------------------------------------------------------------+
* | [--->] SENDER                         LIKE
* | [--->] E_TO_END                       LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_to_end.
    FIELD-SYMBOLS <fs_tab> TYPE tt_to_alv.
    ASSIGN e_to_end->* TO <fs_tab>.
*Tabla de resultados para pantalla resumen
    gt_tab_to_show = CORRESPONDING #( <fs_tab> ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->HANDLE_TO_MESSAGE
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_ANS                          LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_to_message.
*Recupera respuesta de ultimo mensaje popup
    gv_curr_ans = e_ans.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->HANDLE_TO_SAVE
* +-------------------------------------------------------------------------------------------------+
* | [--->] MOD_TAB                        LIKE
* | [--->] SENDER                         LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_to_save.
    CHECK mod_tab IS BOUND.
    FIELD-SYMBOLS <ft_in> TYPE tt_to_alv.
    ASSIGN mod_tab->* TO <ft_in>.
*Graba datos y envia confirmación a sender
    sender->set_data_saved( i_save_ok = me->save_data( i_tab = <ft_in> ) ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->HANDLE_TO_UPDATE
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_TO_UPDATE                    LIKE
* | [--->] E_INFO                         LIKE
* | [--->] SENDER                         LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_to_update.
    FIELD-SYMBOLS <f_line> TYPE ty_to_alv.
    ASSIGN e_to_update->* TO <f_line>.
*Actualiza la linea del ALV
    <f_line>-icon = icon_okay.
*URI de archivo se arma con SAP_ob + file
    <f_line>-sap_ob = VALUE #( sender->gt_cnst[ fname = zcl_rt_bau_revinv_alv=>c_bo_bau ]-low OPTIONAL ).
    <f_line>-file = e_info.
    <f_line>-new_f = abap_true.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->HANDLE_TO_VAL
* +-------------------------------------------------------------------------------------------------+
* | [--->] E_TO_VAL                       LIKE
* | [--->] SENDER                         LIKE
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD handle_to_val.
    FIELD-SYMBOLS <ft_in> TYPE tt_to_alv.
    ASSIGN e_to_val->* TO <ft_in>.
*Valida que modificación en ALV de % este acompañada de un archivo nuevo
    sender->set_val_ok( me->val_data( i_tab = <ft_in> ) ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->LOAD_CNST
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD load_cnst.
*BORRA SIN USO

*    SELECT * FROM zim_cnst
*      INTO CORRESPONDING FIELDS OF TABLE gt_cnst
*      WHERE zzmod = 'RT'
*      AND zzproyt = 'BAU'
*      AND repid = sy-repid.

*    gt_cnst = VALUE #( ( fname = c_bo_bau numb = 1 low = 'ZBUS_BONIF' )
*                       ( fname = c_ip_serv_in numb = 1 low = 'ARL_LINK' )
*                       ( fname = c_ip_serv_out numb = 1 low = 'ARL_LINK' ) ).

*    IF lines( gt_cnst ) IS NOT INITIAL.
      r_ok = abap_true.
*    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->PROCESS_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB                          TYPE REF TO DATA
* | [<-()] R_TAB                          TYPE        TT_INPUT
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD process_data.
    FIELD-SYMBOLS <fs_intab> TYPE tt_input_std.
    ASSIGN i_tab->* TO <fs_intab>.
    r_tab = VALUE #( FOR wa IN <fs_intab> ( wa ) ).

*BORRAR TEST
*    DATA(kbeln) = |0123456789|.
*    DATA(matkl) = |123|.
*    DATA(matkl1) = |456|.
*    DATA(lifnr) = |2290|.
*    DATA(lifnr1) = |1030|.
*    DATA(matnr) = '000000000000000001'.
*    r_tab = VALUE #( kbeln = kbeln
*                                    (  matnr = matnr matkl = matkl lifnr = lifnr  )
*                                    (  matnr = matnr matkl = matkl lifnr = lifnr1 )
*
*                                    (  matnr = matnr matkl = matkl1 lifnr = lifnr1  )
*                                    (  matnr = matnr matkl = matkl1 lifnr = lifnr  ) ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->SAVE_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB                          TYPE        TT_TO_ALV
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD save_data.
    DATA lt_to_db LIKE gt_saved.

    lt_to_db = VALUE #( FOR wa IN i_tab
                        mandt = sy-mandt
                        ernam = sy-uname
                        erdat = sy-datum
                        uzeit = sy-uzeit
                        kbeln = wa-kbeln
                        mot_txt = gs_control-motivo
                        tipo_bon = gs_control-tipo_bon
                      ( matnr = wa-matnr
                        pct_ap = wa-mc
                        sap_object = wa-sap_ob
                        object_id = wa-file ) ).

    IF gt_saved IS INITIAL.
      gt_saved = VALUE #( FOR wa IN gt_to_alv
                          mandt = sy-mandt
                          ernam = sy-uname
                          erdat = sy-datum
                          uzeit = sy-uzeit
                          kbeln = wa-kbeln
                          mot_txt = gs_control-motivo
                          tipo_bon = gs_control-tipo_bon
                        ( matnr = wa-matnr
                          pct_ap = wa-mc
                          sap_object = wa-sap_ob
                          object_id = wa-file ) ).

      LOOP AT lt_to_db REFERENCE INTO DATA(line).
        MODIFY TABLE gt_saved FROM line->*.
      ENDLOOP.
      lt_to_db = gt_saved.
    ELSE.
      LOOP AT lt_to_db REFERENCE INTO line.
        MODIFY TABLE gt_saved FROM line->*.
      ENDLOOP.
    ENDIF.
    MODIFY zrt_rcmp FROM TABLE lt_to_db.
    COMMIT WORK.
    IF sy-subrc IS INITIAL.
      r_ok = abap_true.
    ENDIF.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->SET_DATA_TO_ALV
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB                          TYPE        TT_INPUT
* | [<-()] R_TAB                          TYPE        TT_TO_ALV
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_data_to_alv.
    DATA(file) = abap_false.
*Recupera información de acc
    r_tab = VALUE #( LET acc = zif_rt_bau_rep_acc~get_acc( ) IN
    FOR wa IN i_tab
    LET
    acc_line = VALUE #( acc[ lifnr = wa-lifnr matkl = wa-matkl ] OPTIONAL )
    IN
    ( kbeln = wa-kbeln matnr = wa-matnr matkl = wa-matkl lifnr = wa-lifnr
*Acc trae URI de archivo
      mc = acc_line-mc
      icon = COND #( WHEN acc_line-file IS NOT INITIAL THEN icon_okay ELSE icon_cancel ) )
      ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->SET_NO_OPTION
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB                          TYPE        TT_INPUT
* | [<-()] R_NO_OPTION                    TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD set_no_option.
    TYPES: BEGIN OF ty_filter,
             vkerv TYPE ekerv_v,
           END OF ty_filter,
           tt_filter TYPE SORTED TABLE OF ty_filter WITH NON-UNIQUE KEY vkerv.
*Si contiene algun VKERV de gran barata --> true = no da opción
    r_no_option = COND #(
                  WHEN FILTER #( i_tab IN
                    VALUE tt_filter(  ( vkerv = '08' )
                                      ( vkerv = '09' )
                                      ( vkerv = '10' )
                                      ( vkerv = '12' ) ) WHERE vkerv = vkerv  ) IS INITIAL
                  THEN abap_false ELSE abap_true ).
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Private Method ZCL_RT_BAU_REVINV_DATA->VAL_DATA
* +-------------------------------------------------------------------------------------------------+
* | [--->] I_TAB                          TYPE        TT_TO_ALV
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD val_data.
*i_tab trae los registros modificados por porcentaje
    LOOP AT i_tab REFERENCE INTO DATA(line).
*New_f es true cuando se agregó un nuevo archivo
      IF line->*-new_f NE abap_true.
        RETURN. "como abap_false
      ENDIF.
    ENDLOOP.
    r_ok = abap_true.
  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_DATA->ZIF_RT_BAU_REP_ACC~GET_ACC
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_ACC                          TYPE        TT_ACC
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_rt_bau_rep_acc~get_acc.
*  BORRAR TEST
*    DATA(lifnr) = |2290|.
*    DATA(lifnr1) = |1030|.
*    DATA(matkl) = |123|.
*    DATA(matkl1) = |456|.
*    DATA(matnr) = '000000000000000001'.
*    DATA(file) = '55555555555555555DIR'.
*    DATA(file1) = '66666666666666666DIR'.
*
*    r_acc = VALUE #(
*    (  lifnr = lifnr matkl = matkl matnr = matnr file = file )
*    (  lifnr = lifnr1 matkl = matkl matnr = matnr file = file1 )
*    ).

  ENDMETHOD.


* <SIGNATURE>---------------------------------------------------------------------------------------+
* | Instance Public Method ZCL_RT_BAU_REVINV_DATA->ZIF_RT_BAU_REP_ACC~VAL_ACC
* +-------------------------------------------------------------------------------------------------+
* | [<-()] R_OK                           TYPE        BOOLEAN
* +--------------------------------------------------------------------------------------</SIGNATURE>
  METHOD zif_rt_bau_rep_acc~val_acc.
    r_ok = abap_true.
  ENDMETHOD.
ENDCLASS.